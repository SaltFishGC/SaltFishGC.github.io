import{_ as t,c as l,a as n,b as i,d as a,e as p,r as u,o}from"./app-BlDSCe9p.js";const c={},r={href:"https://vuepress.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://vuepress-theme-reco.recoluan.com/",target:"_blank",rel:"noopener noreferrer"};function v(h,s){const e=u("ExternalLinkIcon");return o(),l("div",null,[s[5]||(s[5]=n("p",null,"搞了一圈，终于算是明白github pages到底是怎么自动化搭建博客的了。 网上的教程很多，这里就不再赘述了，这里主要是帮xd们梳理一下概念以及大致流程，顺便记录一下自己搭建博客的过程，以及踩过的坑。",-1)),s[6]||(s[6]=n("h2",{id:"简要介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简要介绍"},[n("span",null,"简要介绍")])],-1)),n("p",null,[s[2]||(s[2]=a("本项目的blog搭建脚手架选择了")),n("a",r,[s[0]||(s[0]=a("vuepress")),p(e)]),s[3]||(s[3]=a("，这是一个基于vue的静态网站生成器，可以很方便的生成静态网站，同时支持markdown语法，可以很方便的写博客。 选择的模版是")),n("a",d,[s[1]||(s[1]=a("vuepress-theme-reco")),p(e)]),s[4]||(s[4]=a("，这是一个非常炫酷的模版，你可以在这个的基础上更进开发。"))]),s[7]||(s[7]=i(`<h2 id="概念梳理" tabindex="-1"><a class="header-anchor" href="#概念梳理"><span>概念梳理</span></a></h2><h3 id="vuepress" tabindex="-1"><a class="header-anchor" href="#vuepress"><span>vuepress</span></a></h3><p>vuepress是一个静态网站生成器，其会基于你所给出的md文件等静态文件（如图片，css，js）渲染一个静态网页，也就是说，只要你搞好了配置，把md文件扔进去，然后利用vuepress提供的<code>npm run build</code>命令</p><blockquote><p>或者是<code>yarn docs:build</code>，这个基于你的工具，也有可能是<code>npm run build</code>，这一个命令看你所使用脚手架的package.json文件：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress dev .&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress dev .&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress build .&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如在这里，json键值对的key值为dev，start，build，分别对应dev，start，build命令。其他的脚手架可能key值不同，比方说“docs:build”，请自行查看。我们所需要的是值为&quot;vuepress build .&quot;这一条的key值，只有这一条一定要准确！不能出错，否则自动配置的部署部分会报错！现在记不住不用担心，后面写自动化脚本了，我会提醒bro回去看一眼这个key值是否对的上。</p></blockquote><p>就会生成一个静态web，这个web项目会被放到<code>.vuepress/dist</code>文件夹下（一般情况下vuepress都会将最终的web生成在这里，推荐还是仔细看一下自己选的脚手架是否有不同），所以注意<code>.vuepress</code>文件夹的路径，后续我们在写自动化的sh文件时这个路径也不能错，如果是在根路径那就不用加前缀了，<strong>假如.vuepress文件夹不是在你的项目根路径下，那一定要把项目中的父路径加上！</strong></p><p>这里需要明确一点：<strong>最终生成的静态web才是最终展示的page</strong>，而vuepress只是生成器，请注意。</p><h3 id="github-page" tabindex="-1"><a class="header-anchor" href="#github-page"><span>Github Page</span></a></h3><p>github page提供了静态网页的展示，你可以搞一个个人的page（username.github.io）也可以是仓库的（repo）。</p><p>在仓库的setting --&gt; page页面下可以配置该仓库的page，这里使用个人的github page，会自动配置page，完成配置后会显示具体分配的网页ip。</p><h3 id="github-action-自动化实现" tabindex="-1"><a class="header-anchor" href="#github-action-自动化实现"><span>Github Action（自动化实现）</span></a></h3><p>GitHub Actions 是 GitHub 提供的一项功能，允许你在 GitHub 上托管的代码仓库中创建自定义的工作流（workflows）。这些工作流可以自动化各种软件开发过程中的任务，比如构建、测试和部署代码。通过 GitHub Actions，开发者可以在代码提交、合并请求或定时触发等条件下自动运行特定的任务。</p><ol><li><p><strong>Workflow（工作流）</strong>：一个工作流是自动化过程的集合，由一个或多个作业组成。工作流通过 <code>.github/workflows</code> 目录下的 YAML 文件定义，并在 GitHub 仓库中配置。工作流可以根据不同的事件触发，如推送代码、创建拉取请求等。</p></li><li><p><strong>Job（作业）</strong>：作业是工作流中的一个步骤集合。一个工作流可以包含一个或多个作业，每个作业都会在一个新鲜的虚拟机上运行或者是在同一个执行器中并行/串行地运行。</p></li><li><p><strong>Step（步骤）</strong>：步骤是作业中的命令或动作。步骤可以是运行一些 shell 命令、使用 GitHub 社区分享的操作（actions），或者你自己的操作。</p></li><li><p><strong>Action（操作）</strong>：操作是用于执行复杂但常见的任务的可重用单元，例如设置语言环境、打包代码等。你可以使用 GitHub 社区提供的操作，也可以编写自己的操作。</p></li><li><p><strong>Runner（运行器）</strong>：runner 是执行你的工作流的机器。GitHub 提供了 Ubuntu Linux、Windows 和 macOS 的 runner，你也可以托管自己的 runner。</p></li></ol><p>我们本次创建个人Blog所需要的就是在仓库根路径中加入<code>.github/workflows</code>下配置一个yml文件，实现每次push触发推送：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy to GitHub Pages</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">on</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">push</span><span class="token punctuation">:</span> <span class="token comment"># 每次push就会触发workflows</span></span>
<span class="line">    <span class="token key atrule">branches</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> main</span>
<span class="line">  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">jobs</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">deploy</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest</span>
<span class="line">    <span class="token key atrule">permissions</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">contents</span><span class="token punctuation">:</span> write <span class="token comment"># 修改为 write 权限</span></span>
<span class="line">      <span class="token key atrule">pages</span><span class="token punctuation">:</span> write</span>
<span class="line">      <span class="token key atrule">id-token</span><span class="token punctuation">:</span> write</span>
<span class="line"></span>
<span class="line">    <span class="token key atrule">steps</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 🚀 Checkout 源码</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v4</span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 🧱 设置 Node.js 环境</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">&#39;18&#39;</span></span>
<span class="line">          <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token string">&#39;npm&#39;</span></span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 📦 安装依赖</span>
<span class="line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install</span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 🔧 构建项目</span>
<span class="line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run build</span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 🚀 部署到 GitHub Pages</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> peaceiris/actions<span class="token punctuation">-</span>gh<span class="token punctuation">-</span>pages@v3</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">github_token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GITHUB_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token key atrule">publish_dir</span><span class="token punctuation">:</span> .vuepress/dist</span>
<span class="line">          <span class="token key atrule">commit_message</span><span class="token punctuation">:</span> <span class="token string">&#39;Deploy to GitHub Pages&#39;</span></span>
<span class="line">          <span class="token key atrule">publish_branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages  <span class="token comment"># 可选，默认就是 gh-pages，可以省略</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现流程" tabindex="-1"><a class="header-anchor" href="#实现流程"><span>实现流程</span></a></h2><h3 id="_1-npm安装vuepress" tabindex="-1"><a class="header-anchor" href="#_1-npm安装vuepress"><span>1. npm安装vuepress</span></a></h3><h3 id="_2-创建分支并配置github-page" tabindex="-1"><a class="header-anchor" href="#_2-创建分支并配置github-page"><span>2. 创建分支并配置github page</span></a></h3><h3 id="_3-配置自动化sh脚本" tabindex="-1"><a class="header-anchor" href="#_3-配置自动化sh脚本"><span>3. 配置自动化sh脚本</span></a></h3><h2 id="出现问题" tabindex="-1"><a class="header-anchor" href="#出现问题"><span>出现问题</span></a></h2><h3 id="为毛我已经把vuepress的项目push到github上面了-github-page也配置好main做page的source了-跳转就是404呢" tabindex="-1"><a class="header-anchor" href="#为毛我已经把vuepress的项目push到github上面了-github-page也配置好main做page的source了-跳转就是404呢"><span>为毛我已经把vuepress的项目push到github上面了，github page也配置好main做page的source了，跳转就是404呢？</span></a></h3><p>因为github page最终要的是vue而不是vuepress，vuepress是生成vue的脚手架，在使用vuepress执行命令<code>npm run build</code>后，在<code>.vuepress/dist</code>文件夹里面的才是我们要的blog页面，你需要将这个vue给push到你的github仓库里面才能够发布出来。并且这个vue所在的仓库的github page才是最终看得到的静态web！（当然你放另一个分支里，然后在github的setting --&gt; page里面指定好对应的分支也是完全没问题的）</p><p>如果是做额外的分支来存储vue的，记得把分支里面清空了再push进去/执行自动化sh文件。</p><h3 id="github-page要选action吗" tabindex="-1"><a class="header-anchor" href="#github-page要选action吗"><span>github page要选Action吗？</span></a></h3><p>这里我没用，因为我是把vue放到另一个分支的，如果是vuepress大概不需要，和ai一起在<code>.github/workflows/</code>下写个sh脚本即可，如果是hugo之类的可以试试（=。=）</p><h3 id="private不行吗" tabindex="-1"><a class="header-anchor" href="#private不行吗"><span>private不行吗？</span></a></h3><p>假如是分开两个仓库，一个vuepress推送vue到另一个仓库的话，作为vue的仓库一定要public（当然不public也开不了page）我是将两个全放一个仓库里面了，所以必须public</p>`,26))])}const b=t(c,[["render",v]]),g=JSON.parse('{"path":"/blogs/category1/2018/121501.html","title":"关于如何利用github pages搭建个人博客","lang":"en-US","frontmatter":{"title":"关于如何利用github pages搭建个人博客","date":"2025/6/20","tags":["博客"],"categories":["blog"]},"headers":[{"level":2,"title":"简要介绍","slug":"简要介绍","link":"#简要介绍","children":[]},{"level":2,"title":"概念梳理","slug":"概念梳理","link":"#概念梳理","children":[{"level":3,"title":"vuepress","slug":"vuepress","link":"#vuepress","children":[]},{"level":3,"title":"Github Page","slug":"github-page","link":"#github-page","children":[]},{"level":3,"title":"Github Action（自动化实现）","slug":"github-action-自动化实现","link":"#github-action-自动化实现","children":[]}]},{"level":2,"title":"实现流程","slug":"实现流程","link":"#实现流程","children":[{"level":3,"title":"1. npm安装vuepress","slug":"_1-npm安装vuepress","link":"#_1-npm安装vuepress","children":[]},{"level":3,"title":"2. 创建分支并配置github page","slug":"_2-创建分支并配置github-page","link":"#_2-创建分支并配置github-page","children":[]},{"level":3,"title":"3. 配置自动化sh脚本","slug":"_3-配置自动化sh脚本","link":"#_3-配置自动化sh脚本","children":[]}]},{"level":2,"title":"出现问题","slug":"出现问题","link":"#出现问题","children":[{"level":3,"title":"为毛我已经把vuepress的项目push到github上面了，github page也配置好main做page的source了，跳转就是404呢？","slug":"为毛我已经把vuepress的项目push到github上面了-github-page也配置好main做page的source了-跳转就是404呢","link":"#为毛我已经把vuepress的项目push到github上面了-github-page也配置好main做page的source了-跳转就是404呢","children":[]},{"level":3,"title":"github page要选Action吗？","slug":"github-page要选action吗","link":"#github-page要选action吗","children":[]},{"level":3,"title":"private不行吗？","slug":"private不行吗","link":"#private不行吗","children":[]}]}],"git":{"createdTime":1750432469000,"updatedTime":1750432469000,"contributors":[{"name":"SaltFishGC","email":"130335482+SaltFishGC@users.noreply.github.com","commits":1}]},"filePathRelative":"blogs/category1/2018/121501.md"}');export{b as comp,g as data};
